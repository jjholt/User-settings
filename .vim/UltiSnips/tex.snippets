snippet { "{" iA
{$1}$0
endsnippet

snippet ( "(" iA
($1)$0
endsnippet

snippet @q "theta" iA
\theta
endsnippet

snippet @a "alpha" iA
\alpha
endsnippet

snippet @A "Alpha" iA
\Alpha
endsnippet

snippet @b "beta" iA
\beta
endsnippet

snippet @B "Beta" iA
\Beta
endsnippet

snippet @w "omega" iA
\omega
endsnippet

snippet @W "Omega" iA
\Omega
endsnippet

snippet @p "pi" iA
\pi
endsnippet

snippet @t "tau" iA
\tau
endsnippet

snippet ` "quotes" iA
\`$1'$0
endsnippet
	
snippet bit "Itemize"
\begin{itemize}
	\item $1
\end{itemize}
endsnippet

snippet ben "Enumerate"
\begin{enumerate}
	\item $1
\end{enumerate}
endsnippet

snippet it "item"
\item $0
endsnippet

snippet le "\left" i
\left$0
endsnippet

snippet ri "\right" i
\right$0
endsnippet

snippet @| "\big|" iA
\big|$0
endsnippet

snippet @I "int" iA
\int_{$1}^{$2}$3\,dx $0
endsnippet

snippet beq "beq" iA
\begin{equation}
$1
\end{equation}$0
endsnippet

snippet bseq "bseq" iA
\begin{equation*}
$1
\end{equation*}$0
endsnippet

snippet bal "bal" iA
\begin{align}
$1
\end{align}$0
endsnippet
snippet bsal "bsal" iA
\begin{align*}
$1
\end{align*}$0
endsnippet

snippet @/ "frac" iA
\frac{$1}{$2}$0
endsnippet

snippet dx "dx" i
\frac{d$2}{d${1:x}$2}$0
endsnippet
snippet dp "dp" i
\frac{\partial$2}{\partial${1:x}$2}$0
endsnippet

snippet $ "Add $" A
\( $1 \)$0
endsnippet

snippet => "Implies" A
\implies $0
endsnippet

snippet ln "ln" A
\ln($1) $0
endsnippet

snippet cos "cos" A
\cos($1) $0
endsnippet

snippet sin "sin" A
\sin($1) $0
endsnippet

global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet 'arr(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet
